{"version":3,"sources":["services.js","App.js","reportWebVitals.js","index.js"],"names":["fetchContactList","a","console","log","fetch","corsanywhere","headers","response","json","data","normalizeData","obj","contacts","map","contact","fullName","firstName","lastName","dealCount","deals","length","currency","totalValue","reduce","total","dealId","foundDeal","find","deal","id","Number","value","formatter","Intl","NumberFormat","style","toUpperCase","maximumFractionDigits","minimumFractionDigits","valueTotal","format","geoIps","forEach","geoIpId","foundGeoIp","ip","geoAddrId","geoaddrid","foundGeoAddr","geoAddresses","addr","location","city","state","country","tags","contactTags","acc","contactTag","foundTag","tag","push","join","App","useState","setContacts","useEffect","then","contactData","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d491b20.chunk.js","sourcesContent":["const corsanywhere = \"https://cors-anywhere.herokuapp.com/\"\nconst baseUrl = \"https://sahmed93846.api-us1.com/api/3\"\nconst apiKey = \"bcd062dedabcd0f1ac8a568cdcf58660c44d7e79b91763cc1a5d0c03d52c522d851fceb0\"\nconst contactEndPoint = '/contacts'\nconst tagsEndPoint = '/tags'\n\nexport const fetchContactList = async() => {\n  try {\n    console.log(\"Request\")\n    const response = await fetch(corsanywhere + baseUrl + contactEndPoint + \"?include=deals,geoIps.geoAddress,tags,contactTags.tag\", {\n      headers:{\n        \"Api-Token\": apiKey\n      }\n    })\n    const data = await response.json()\n    console.log(normalizeData(data))\n\n    return normalizeData(data)\n  } catch(error) {\n    console.log(error)\n  }\n}\n\nconst normalizeData = (obj) => {\n  const contacts = obj.contacts.map((contact) => {\n    contact.fullName = contact.firstName + \" \" + contact.lastName \n    contact.dealCount = contact.deals.length\n    let currency = \"\"\n    let totalValue = contact.deals.reduce((total, dealId) => {\n      let foundDeal = obj.deals.find((deal) => deal.id === dealId)\n      if(foundDeal){\n        //Assuming every deal under one contact is of the same currency\n        currency = foundDeal.currency\n        return total + Number(foundDeal.value)\n      } else {\n        return total\n      }\n    }, 0)\n\n    if(currency && totalValue) {\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency.toUpperCase(),\n        maximumFractionDigits: 0, \n        minimumFractionDigits: 0\n      });\n      \n      contact.valueTotal = formatter.format(totalValue);\n    } else {\n      contact.valueTotal = \"-\";\n    }\n\n    contact.geoIps.forEach((geoIpId) => {\n      const foundGeoIp = obj.geoIps.find((ip) => ip.id === geoIpId)\n      if(foundGeoIp) {\n        const geoAddrId = foundGeoIp.geoaddrid\n        const foundGeoAddr = obj.geoAddresses.find((addr) => addr.id === geoAddrId)\n        if(foundGeoAddr) {\n          contact.location = foundGeoAddr.city + \", \" + foundGeoAddr.state + \", \" + foundGeoAddr.country\n          // return here to end forEach since we found our location\n          return\n        }\n      }\n    })\n\n    const tags = obj.contactTags.reduce((acc, contactTag) => {\n      if(contactTag.contact === contact.id) {\n        const foundTag = obj.tags.find((tag) => tag.id === contactTag.tag)\n        if(foundTag) {\n          acc.push(foundTag.tag)\n        }\n      }\n\n      return acc\n    }, [])\n\n    contact.tags = tags.join(\", \")\n\n    return contact\n  })\n\n  return contacts\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\n\nimport {fetchContactList} from './services.js'\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n     fetchContactList().then((contactData) => {\n      setContacts(contactData)\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n     <table className=\"table\">\n      <tr className=\"header\">\n       <th className=\"left-padding\">Contact</th>\n       <th>Total Value</th>\n       <th>Location</th>\n       <th id=\"dealCell\">Deals</th>\n       <th>Tags</th>\n      </tr>\n    {contacts.map((contact) => {\n      return <tr className=\"row\">\n              <td className=\"left-padding\" id=\"nameCell\">{contact.fullName}</td>\n              <td>{contact.valueTotal}</td>\n              <td>{contact.location || \"-\"}</td>\n              <td id=\"dealCell\">{contact.deals.length}</td>\n              <td>{contact.tags}</td>\n             </tr>\n    })}\n    </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}